#!/usr/bin/env python3
import click

# Common options.
@click.group()
@click.option("-v", "verbose", default=False, is_flag=True, help="verbose mode")
@click.pass_context
def cli(context, verbose):
    context.ensure_object(dict)
    context.obj["verbose"] = verbose
    # Overwrite settings in ~/.astra/astra.yml
    # from astra import log
    # log.set_level(10 if verbose else 20)


@cli.command()
@click.option("--drop-tables", is_flag=True)
def initdb(drop_tables):
    """Initialize the database."""
    from astra.database.astradb import create_tables

    create_tables(
        drop_existing_tables=drop_tables,
        reuse_if_open=True,
        insert_status_rows=True,
    )
    return None


@cli.command()
@click.argument("path")
def run(path, **kwargs):
    """Execute one or many tasks."""
    import os
    import json
    from importlib import import_module
    from astra.utils import log
    from astra.database.astradb import DataProduct
    from tqdm import tqdm

    with open(path, "r") as fp:
        content = json.load(fp)
    
    # Get the task executable.
    module_name, function_name = content["task_callable"].rsplit(".", 1)
    module = import_module(module_name)
    task_callable = getattr(module, function_name)

    task_kwargs = content.get("task_kwargs", {})
    has_data_products = "data_product" in task_kwargs # TODO: this special key should be defined elsewhere
    if has_data_products:
        # Resolve the data products
        data_products = task_kwargs.pop("data_product", [])
        if isinstance(data_products, str):
            data_products = json.loads(data_products)
        task_kwargs["data_product"] = DataProduct.select().where(DataProduct.id << data_products)
    
    log.info(f"Executing..")

    results = task_callable(**task_kwargs)

    for result in results:
        None
    log.info(f"Done")
    
    # Remove the path now that we're done.
    try:
        os.unlink(path)
    except:
        None



if __name__ == "__main__":
    cli(obj=dict())
