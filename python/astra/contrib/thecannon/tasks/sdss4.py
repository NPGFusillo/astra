import os
import astropy.table
from sqlalchemy import (ARRAY as Array, Column, Float)

from astra.tasks.io.sdss4 import SDSS4ApStarFile as ApStarFile
from astra.tasks.continuum import Sinusoidal
from astra.tasks.targets import (DatabaseTarget, LocalTarget, AstraSource)

from astra.contrib.thecannon.tasks.train import TrainTheCannonGivenTrainingSetTask
from astra.contrib.thecannon.tasks.test import EstimateStellarLabelsGivenApStarFileBase



class TheCannonResult(DatabaseTarget):

    """ A row in a database representing a result from The Cannon. """

    table_name = "sdss4_thecannon_apstar"

    # TODO: This should be updated when the "production" model of The Cannon is decided.
    teff = Column("teff", Array(Float))
    logg = Column("logg", Array(Float))
    fe_h = Column("fe_h", Array(Float))
    u_teff = Column("u_teff", Array(Float))
    u_logg = Column("u_logg", Array(Float))
    u_fe_h = Column("u_fe_h", Array(Float))

    snr = Column("snr", Array(Float))
    chi_sq = Column("chi_sq", Array(Float))
    r_chi_sq = Column("r_chi_sq", Array(Float))


class ContinuumNormalize(Sinusoidal, ApStarFile):

    """
    A pseudo-continuum normalisation task for individual visit spectra 
    in ApStarFiles using a sum of sines and cosines to model the continuum.
    """

    def requires(self):
        return ApStarFile(**self.get_common_param_kwargs(ApStarFile))


    def output():
        # TODO: Move to AstraSource or similar?
        is_apogee = getattr(self, "apred", None) is not None
        reduction_version = self.apred if is_apogee else self.run2d
        path = os.path.join(
            self.output_base_dir,
            f"{self.telescope}/{self.field}"
            f"Continuum-{reduction_version}-{self.telescope}-{self.field}-{self.obj}-{self.task_id}.pkl"
        )
        os.makedirs(os.path.dirname(path), exist_ok=True)
    
        return LocalTarget(path)
        

class EstimateStellarLabelsGivenSDSS4ApStarFile(EstimateStellarLabelsGivenApStarFileBase, ContinuumNormalize):


    def requires(self):
        requirements = super(EstimateStellarLabelsGivenSDSS4ApStarFile, self).requires()
        requirements.update({
            "observation": ApStarFile(**self.get_common_param_kwargs(ApStarFile)),
            "continuum": ContinuumNormalize(**self.get_common_param_kwargs(ContinuumNormalize))
        })
        return requirements
        

    def output(self):
        """ The outputs generated by the task. """

        if self.is_batch_mode:
            return [task.output() for task in self.get_batch_tasks()]

        return {
            "AstraSource": AstraSource(self),
            "database": TheCannonResult(self)
        }
        

