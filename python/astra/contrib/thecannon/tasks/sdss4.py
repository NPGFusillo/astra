import os
import astropy.table

from astra.database import astradb
from astra.tasks.io.sdss4 import SDSS4ApStarFile
from astra.tasks.continuum import Sinusoidal
from astra.tasks.targets import DatabaseTarget, LocalTarget, AstraSource

from astra.contrib.thecannon.tasks.train import TrainTheCannonGivenTrainingSetTask
from astra.contrib.thecannon.tasks.test import EstimateStellarLabelsGivenApStarFileBase


class ContinuumNormalize(Sinusoidal, SDSS4ApStarFile):

    """
    A pseudo-continuum normalisation task for individual visit spectra
    in ApStarFiles using a sum of sines and cosines to model the continuum.
    """

    def requires(self):
        return self.clone(SDSS4ApStarFile)

    def output():
        # TODO: Move to AstraSource or similar?
        is_apogee = getattr(self, "apred", None) is not None
        reduction_version = self.apred if is_apogee else self.run2d
        path = os.path.join(
            self.output_base_dir,
            f"{self.telescope}/{self.field}"
            f"Continuum-{reduction_version}-{self.telescope}-{self.field}-{self.obj}-{self.task_id}.pkl",
        )
        os.makedirs(os.path.dirname(path), exist_ok=True)

        return LocalTarget(path)


class EstimateStellarLabelsGivenSDSS4ApStarFile(
    EstimateStellarLabelsGivenApStarFileBase, ContinuumNormalize
):
    def requires(self):
        requirements = super(EstimateStellarLabelsGivenSDSS4ApStarFile, self).requires()
        requirements.update(
            {
                "observation": self.clone(SDSS4ApStarFile),
                "continuum": self.clone(ContinuumNormalize),
            }
        )
        return requirements

    def output(self):
        """The outputs generated by the task."""

        if self.is_batch_mode:
            return (task.output() for task in self.get_batch_tasks())

        return {
            "AstraSource": AstraSource(self),
            "database": DatabaseTarget(astradb.TheCannon, self),
        }
