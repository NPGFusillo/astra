import os
from astra.tasks.io import ApStarFile
from astra.tasks.continuum import Sinusoidal
from astra.tasks.targets import (DatabaseTarget, LocalTarget)

from astra.contrib.thecannon.tasks.test import EstimateStellarParametersGivenApStarFileBase

from sqlalchemy import Column, Float

class TheCannonResult(DatabaseTarget):

    """ A row in a database representing a result from The Cannon. """

    # TODO: This should be updated when the "production" model of The Cannon is decided.
    teff = Column("teff", Float)
    logg = Column("logg", Float)
    fe_h = Column("fe_h", Float)
    u_teff = Column("u_teff", Float)
    u_logg = Column("u_logg", Float)
    u_fe_h = Column("u_fe_h", Float)
    


class ContinuumNormalizeIndividualVisitsInApStarFile(Sinusoidal, ApStarFile):

    """
    A pseudo-continuum normalisation task for individual visit spectra 
    in ApStarFiles using a sum of sines and cosines to model the continuum.
    """

    # Row 0 is individual pixel weighting
    # Row 1 is global pixel weighting
    # Row 2+ are the individual visits.
    # We will just analyse them all because it's cheap.

    def requires(self):
        return ApStarFile(**self.get_common_param_kwargs(ApStarFile))


    def output(self):
        """ The outputs generated by the task. """

        if self.is_batch_mode:
            return [task.output() for task in self.get_batch_tasks()]

        path = os.path.join(
            self.output_base_dir,
            f"star/{self.telescope}/{int(self.healpix)/1000:.0f}/{self.healpix}/",
            f"apStar-{self.apred}-{self.telescope}-{self.obj}-{self.task_id}.fits"
        )
        os.makedirs(os.path.dirname(path), exist_ok=True)
    
        return LocalTarget(path)
        

class EstimateStellarParametersGivenApStarFile(EstimateStellarParametersGivenApStarFileBase, ContinuumNormalizeIndividualVisitsInApStarFile):

    def requires(self):
        requirements = super(EstimateStellarParametersGivenApStarFile, self).requires()
        requirements.update(
            observation=ContinuumNormalizeIndividualVisitsInApStarFile(**self.get_common_param_kwargs(ContinuumNormalizeIndividualVisitsInApStarFile))
        )
        return requirements
        

    def output(self):
        """ The outputs generated by the task. """

        if self.is_batch_mode:
            return [task.output() for task in self.get_batch_tasks()]

        path = os.path.join(
            self.output_base_dir,
            f"star/{self.telescope}/{int(self.healpix)/1000:.0f}/{self.healpix}/",
            f"astraSource-{self.apred}-{self.telescope}-{self.obj}-{self.task_id}.fits"
        )
        os.makedirs(os.path.dirname(path), exist_ok=True)
    
        return {
            #"etc": LocalTarget(path),
            "astraSource": LocalTarget(path),
            "database": TheCannonResult(self)
        }
        